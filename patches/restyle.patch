diff --git a/dist/create-restyle-props.js b/dist/create-restyle-props.js
index 1317f1544a6193602bd0634ee23b66ba984d3182..d46006288bfa34c81136a67f381c672f89f5d21d 100644
--- a/dist/create-restyle-props.js
+++ b/dist/create-restyle-props.js
@@ -14,23 +14,19 @@ export function createRestyleProps(type, props) {
     }
     if (Styles) {
         const stylesToRender = React.createElement(Styles, { key: 'rss' });
-        if (props.children) {
-            if (props.children.constructor === Array) {
-                props.children = props.children.concat(stylesToRender);
-            }
-            else if (typeof props.children === 'string') {
-                props.children = [props.children, stylesToRender];
-            }
-            else {
-                props.children = [
-                    React.cloneElement(props.children, { key: 'rse' }),
-                    stylesToRender,
-                ];
-            }
+        if (Array.isArray(props.children)) {
+            props.children = props.children.concat(stylesToRender);
+        }
+        else if (props.children && typeof props.children === 'object' && 'type' in props.children) {
+            props.children = [
+                React.cloneElement(props.children, { key: 'rse' }),
+                stylesToRender,
+            ]
         }
         else {
-            props.children = stylesToRender;
+            props.children = [props.children, stylesToRender]
         }
+        
     }
     return [props, null];
 }
diff --git a/dist/media.d.ts b/dist/media.d.ts
index 6aee0feb6a4360db24c3af3018738077ddf5bfc9..1bb2ca697062e775f6b61ba1b75f45a3b584cbd2 100644
--- a/dist/media.d.ts
+++ b/dist/media.d.ts
@@ -63,5 +63,5 @@ interface MediaFeatures {
 }
 type MediaQueryObject = MediaQueryTypes & MediaFeatureQualifiers & MediaFeatures;
 /** Create a media query string from a list of media query objects. */
-export declare function media(...queries: (MediaQueryObject | string)[]): any;
+export declare function media(...queries: (MediaQueryObject | string)[]): string;
 export {};
diff --git a/dist/types.d.ts b/dist/types.d.ts
index 190e4705d0437faf3ed6ca2bd0c9dcdad7396774..202e98936cbbdffbdc698cb361ced25629efc66b 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -1,13 +1,15 @@
 export type CustomProperties = {
     [key in `--${string}`]?: string | number;
 };
-export type CSSObject = React.CSSProperties & {
-    [Key: string]: React.CSSProperties | CSSObject | string | number | undefined;
-};
+export type CSSObject =
+| {
+        [Key: string]: CSSObject | React.CSSProperties | undefined;
+  }
+| React.CSSProperties;
 export type CSSValue = CSSObject[keyof CSSObject];
 export type CSSRule = [className: string, rule?: string];
 type ClassNameMessage = 'Component must accept a className prop';
-export type AcceptsClassName<T> = T extends keyof JSX.IntrinsicElements ? 'className' extends keyof JSX.IntrinsicElements[T] ? T : ClassNameMessage : T extends React.ComponentType<infer P> ? 'className' extends keyof P ? T : ClassNameMessage : ClassNameMessage;
+export type AcceptsClassName<T> = T extends keyof React.JSX.IntrinsicElements ? 'className' extends keyof React.JSX.IntrinsicElements[T] ? T : ClassNameMessage : T extends React.ComponentType<infer P> ? 'className' extends keyof P ? T : ClassNameMessage : ClassNameMessage;
 export declare namespace RestyleJSX {
     type Element = React.JSX.Element;
     type ElementType = React.JSX.ElementType;
@@ -18,7 +20,7 @@ export declare namespace RestyleJSX {
     type IntrinsicAttributes = React.JSX.IntrinsicAttributes;
     type IntrinsicClassAttributes<T> = React.JSX.IntrinsicClassAttributes<T>;
     type IntrinsicElements = {
-        [K in keyof JSX.IntrinsicElements]: React.JSX.IntrinsicElements[K] & {
+        [K in keyof React.JSX.IntrinsicElements]: React.JSX.IntrinsicElements[K] & {
             css?: CSSObject;
         };
     };
