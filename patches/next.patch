diff --git a/dist/esm/lib/typescript/writeConfigurationDefaults.js b/dist/esm/lib/typescript/writeConfigurationDefaults.js
index aae0311806624d2b807e6e16ced7c09ab68107ac..f752343a206c7430055af08bc1bface0702ccae7 100644
--- a/dist/esm/lib/typescript/writeConfigurationDefaults.js
+++ b/dist/esm/lib/typescript/writeConfigurationDefaults.js
@@ -104,6 +104,7 @@ function getDesiredCompilerOptions(ts, tsOptions) {
 }
 export function getRequiredConfiguration(ts) {
     const res = {};
+    return res;
     const desiredCompilerOptions = getDesiredCompilerOptions(ts);
     for (const optionKey of Object.keys(desiredCompilerOptions)){
         const ev = desiredCompilerOptions[optionKey];
@@ -115,6 +116,7 @@ export function getRequiredConfiguration(ts) {
     return res;
 }
 export async function writeConfigurationDefaults(ts, tsConfigPath, isFirstTimeSetup, hasAppDir, distDir, hasPagesDir) {
+    return;
     var _userTsConfig_compilerOptions;
     if (isFirstTimeSetup) {
         await fs.writeFile(tsConfigPath, '{}' + os.EOL);
diff --git a/dist/lib/typescript/writeConfigurationDefaults.js b/dist/lib/typescript/writeConfigurationDefaults.js
index 81bf49e849988154625f0ed84c734b6bc2f27ff5..91a3eb541a8326e42c42b822f5c0b0aecce7b70f 100644
--- a/dist/lib/typescript/writeConfigurationDefaults.js
+++ b/dist/lib/typescript/writeConfigurationDefaults.js
@@ -172,6 +172,7 @@ function getDesiredCompilerOptions(ts, tsOptions) {
 }
 function getRequiredConfiguration(ts) {
     const res = {};
+    return res;
     const desiredCompilerOptions = getDesiredCompilerOptions(ts);
     for (const optionKey of Object.keys(desiredCompilerOptions)){
         const ev = desiredCompilerOptions[optionKey];
@@ -183,6 +184,7 @@ function getRequiredConfiguration(ts) {
     return res;
 }
 async function writeConfigurationDefaults(ts, tsConfigPath, isFirstTimeSetup, hasAppDir, distDir, hasPagesDir) {
+    return;
     var _userTsConfig_compilerOptions;
     if (isFirstTimeSetup) {
         await _fs.promises.writeFile(tsConfigPath, '{}' + _os.default.EOL);
